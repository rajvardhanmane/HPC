#include <stdio.h>
#include <omp.h>
void sequential_pi(){
 long long num_terms = 100000000;  // Number of terms
    double pi = 0.0;
    double start,end;
    start = omp_get_wtime();
    for (long long i = 0; i < num_terms; i++) {
        double term = 4.0 / (2 * i + 1);
        if (i % 2 != 0){
                term = -term;
        }
        pi += term;
    }
    end = omp_get_wtime();
printf("\n\n#################Sequential Calculation################\n\n");
    printf("Estimated Pi: %f\n", pi);
    printf("Required time :%f\n",end-start);
    printf("\n\n#################End of Sequential Calculation################\n\n");
}
int main() {
    sequential_pi();
    long long num_terms = 100000000;  // Number of terms
    double pi = 0.0;
    double start,end;
    start = omp_get_wtime();
    #pragma omp parallel for reduction(+:pi)
    for (long long i = 0; i < num_terms; i++) {
        double term = 4.0 / (2 * i + 1);
        if (i % 2 != 0){ 
		term = -term;
	}  
        pi += term;
    }
    end = omp_get_wtime();
printf("\n\n#################Parallel Calculation################\n\n");
    printf("Estimated Pi: %f\n", pi);
	printf("Required time :%f\n",end-start);
	printf("\n\n#################End of Parallel Calculation################\n\n");
    return 0;
}




===================================================================================================================================================================
Problem Statement 2
#include<stdio.h>
#include<omp.h>
#include<stdlib.h>
void sequential(){
long long num_terms = 100000000;
       	 double *arr = (double *)malloc(num_terms * sizeof(double));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
         }
        double start,end;
        start = omp_get_wtime();
        for(int i=0;i<num_terms;i++){
                arr[i] = arr[i] + 10.098;
        }
        end = omp_get_wtime();
        printf("Sequential Addition : %f\n\n",end-start);
}
int main(){
	sequential();
	long long num_terms = 100000000;
	double *arr = (double *)malloc(num_terms * sizeof(double));  
    if (arr == NULL) {
        printf("Memory allocation failed\n");
         }
	double start,end;
	start = omp_get_wtime();
	#pragma omp parallel for
	for(int i =0;i<num_terms;i++){
	arr[i] = arr[i] + 10.098;
	}
	end = omp_get_wtime();
	printf("Parallel Addition : %f\n\n",end-start);
	return 0;
	
}
